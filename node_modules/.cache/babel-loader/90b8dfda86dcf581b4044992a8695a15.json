{"ast":null,"code":"var _jsxFileName = \"/Users/benniewalker/Desktop/2022_development/HoustonRockets/client/src/App.js\",\n    _s = $RefreshSig$();\n\nimport './App.css';\nimport React, { useState, useEffect } from 'react'; // Reducers\n\nimport GetScoreData from './reducers/ScoreAPI';\nimport GetLastPlayData from './reducers/LastPlayAPI'; // Components\n\nimport LoadingScreen from './components/resources/loadingScreen.jsx';\nimport Header from './components/resources/header.jsx';\nimport ScoreBoard from './components/mainCards/scoreBoard.jsx';\nimport WindowScoreBoard from './components/mainCards/windowScoreBoard.jsx';\nimport LastPlayDetail from './components/tabs/lastPlayDetail.jsx';\nimport TeamStats from './components/tabs/teamStats.jsx';\nimport Tickets from './components/resources/tickets.jsx';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction App() {\n  _s();\n\n  const [error, setError] = useState(null);\n  const [data, setData] = useState([]);\n  const [loaded, setLoaded] = useState(false); // const [ scoreDetail, setScoreDetail ] = useState([]);\n  // const [ teamData, setTeamData ] = useState([]);\n  // const [ lastPlayData, setLastPlayData ] = useState([]);\n  // const [ showTeamData, setShowTeamData ] = useState(false);\n  // const [ showLastPlay, setShowLastPlay ] = useState(true);\n  // const [ showTickets, setShowTickets ] = useState(false);\n  // const [ isFullScreen, setIsFullScreen ] = useState(false);\n  // const homeTeam = () => {\n  //   setShowLastPlay(false);\n  //   setShowTeamData(true);\n  //   setTeamData(data.hls.pstsg);\n  //   setShowTickets(false);\n  // }\n  // const awayTeam = () => {\n  //   setShowLastPlay(false);\n  //   setShowTeamData(true);\n  //   setTeamData(data.vls.pstsg);\n  //   setShowTickets(false);\n  // }\n  // const lastPlay = () => {\n  //   setShowTeamData(false);\n  //   setShowLastPlay(true);\n  //   setShowTickets(false);\n  // }\n  // const tickets = () => {\n  //   setShowTeamData(false);\n  //   setShowLastPlay(false);\n  //   setShowTickets(true);\n  // }\n  // const fullScreen = () => {\n  //   setIsFullScreen(true);\n  // }\n  // const hideFullScreen = () => {\n  //   setIsFullScreen(false);\n  // }\n\n  useEffect(() => {\n    fetch(\"https://htxrockets.com/api/archived-game/0022101142\").then(res => res.json()).then(res => {\n      // setData(res.g); \n      // setScoreDetail(GetScoreData(data));\n      // setLastPlayData(GetLastPlayData(data));\n      // setLoaded(true);\n      console.log('data loaded');\n      console.log(loaded);\n    }, // Note: handling errors here\n    // instead of a catch() block so that we don't swallow\n    // exceptions from actual bugs in components.\n    error => {\n      setError(error);\n      console.log(error);\n      setLoaded(true);\n    });\n  }, []);\n\n  if (error) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"App\",\n      children: [\"Error: \", error.message]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 91,\n      columnNumber: 12\n    }, this);\n  } else if (!loaded) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"loading-page\",\n      children: /*#__PURE__*/_jsxDEV(LoadingScreen, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 94,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 93,\n      columnNumber: 12\n    }, this);\n  } else if (isFullScreen === true) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"App\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 98,\n      columnNumber: 7\n    }, this);\n  } else {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"App\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 129,\n      columnNumber: 7\n    }, this);\n  }\n}\n\n_s(App, \"+xnI8R/7Z4ZMr0oCUQTMcuXmbnA=\");\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["/Users/benniewalker/Desktop/2022_development/HoustonRockets/client/src/App.js"],"names":["React","useState","useEffect","GetScoreData","GetLastPlayData","LoadingScreen","Header","ScoreBoard","WindowScoreBoard","LastPlayDetail","TeamStats","Tickets","App","error","setError","data","setData","loaded","setLoaded","fetch","then","res","json","console","log","message","isFullScreen"],"mappings":";;;AAAA,OAAO,WAAP;AACA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA0C,OAA1C,C,CAEA;;AACA,OAAOC,YAAP,MAAyB,qBAAzB;AACA,OAAOC,eAAP,MAA4B,wBAA5B,C,CAEA;;AACA,OAAOC,aAAP,MAA0B,0CAA1B;AACA,OAAOC,MAAP,MAAmB,mCAAnB;AACA,OAAOC,UAAP,MAAuB,uCAAvB;AACA,OAAOC,gBAAP,MAA6B,6CAA7B;AACA,OAAOC,cAAP,MAA2B,sCAA3B;AACA,OAAOC,SAAP,MAAsB,iCAAtB;AACA,OAAOC,OAAP,MAAoB,oCAApB;;;AAEA,SAASC,GAAT,GAAe;AAAA;;AACb,QAAM,CAAEC,KAAF,EAASC,QAAT,IAAsBb,QAAQ,CAAC,IAAD,CAApC;AACA,QAAM,CAAEc,IAAF,EAAQC,OAAR,IAAoBf,QAAQ,CAAC,EAAD,CAAlC;AACA,QAAM,CAAEgB,MAAF,EAAUC,SAAV,IAAwBjB,QAAQ,CAAC,KAAD,CAAtC,CAHa,CAKb;AAEA;AACA;AAEA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;;AAEAC,EAAAA,SAAS,CAAC,MAAM;AACdiB,IAAAA,KAAK,CAAC,qDAAD,CAAL,CACCC,IADD,CACQC,GAAD,IAASA,GAAG,CAACC,IAAJ,EADhB,EAECF,IAFD,CAEQC,GAAD,IAAS;AACZ;AACA;AAEA;AACA;AACAE,MAAAA,OAAO,CAACC,GAAR,CAAY,aAAZ;AACAD,MAAAA,OAAO,CAACC,GAAR,CAAYP,MAAZ;AACD,KAVH,EAWE;AACA;AACA;AACCJ,IAAAA,KAAD,IAAW;AACTC,MAAAA,QAAQ,CAACD,KAAD,CAAR;AACAU,MAAAA,OAAO,CAACC,GAAR,CAAYX,KAAZ;AACAK,MAAAA,SAAS,CAAC,IAAD,CAAT;AACD,KAlBH;AAoBD,GArBQ,EAqBN,EArBM,CAAT;;AAuBA,MAAIL,KAAJ,EAAW;AACT,wBAAO;AAAK,MAAA,SAAS,EAAC,KAAf;AAAA,4BAA6BA,KAAK,CAACY,OAAnC;AAAA;AAAA;AAAA;AAAA;AAAA,YAAP;AACD,GAFD,MAEO,IAAI,CAACR,MAAL,EAAa;AAClB,wBAAO;AAAK,MAAA,SAAS,EAAC,cAAf;AAAA,6BACH,QAAC,aAAD;AAAA;AAAA;AAAA;AAAA;AADG;AAAA;AAAA;AAAA;AAAA,YAAP;AAGD,GAJM,MAIA,IAAIS,YAAY,KAAK,IAArB,EAA2B;AAChC,wBACE;AAAK,MAAA,SAAS,EAAC;AAAf;AAAA;AAAA;AAAA;AAAA,YADF;AA8BD,GA/BM,MA+BA;AACL,wBACE;AAAK,MAAA,SAAS,EAAC;AAAf;AAAA;AAAA;AAAA;AAAA,YADF;AAUD;AACF;;GA1HQd,G;;KAAAA,G;AA4HT,eAAeA,GAAf","sourcesContent":["import './App.css';\nimport React, { useState, useEffect} from 'react';\n\n// Reducers\nimport GetScoreData from './reducers/ScoreAPI';\nimport GetLastPlayData from './reducers/LastPlayAPI';\n\n// Components\nimport LoadingScreen from './components/resources/loadingScreen.jsx';\nimport Header from './components/resources/header.jsx';\nimport ScoreBoard from './components/mainCards/scoreBoard.jsx';\nimport WindowScoreBoard from './components/mainCards/windowScoreBoard.jsx';\nimport LastPlayDetail from './components/tabs/lastPlayDetail.jsx';\nimport TeamStats from './components/tabs/teamStats.jsx';\nimport Tickets from './components/resources/tickets.jsx';\n\nfunction App() {\n  const [ error, setError ] = useState(null);\n  const [ data, setData ] = useState([]);\n  const [ loaded, setLoaded ] = useState(false);\n\n  // const [ scoreDetail, setScoreDetail ] = useState([]);\n\n  // const [ teamData, setTeamData ] = useState([]);\n  // const [ lastPlayData, setLastPlayData ] = useState([]);\n\n  // const [ showTeamData, setShowTeamData ] = useState(false);\n  // const [ showLastPlay, setShowLastPlay ] = useState(true);\n  // const [ showTickets, setShowTickets ] = useState(false);\n\n  // const [ isFullScreen, setIsFullScreen ] = useState(false);\n\n  // const homeTeam = () => {\n  //   setShowLastPlay(false);\n  //   setShowTeamData(true);\n  //   setTeamData(data.hls.pstsg);\n  //   setShowTickets(false);\n  // }\n\n  // const awayTeam = () => {\n  //   setShowLastPlay(false);\n  //   setShowTeamData(true);\n  //   setTeamData(data.vls.pstsg);\n  //   setShowTickets(false);\n  // }\n\n  // const lastPlay = () => {\n  //   setShowTeamData(false);\n  //   setShowLastPlay(true);\n  //   setShowTickets(false);\n  // }\n\n  // const tickets = () => {\n  //   setShowTeamData(false);\n  //   setShowLastPlay(false);\n  //   setShowTickets(true);\n  // }\n\n  // const fullScreen = () => {\n  //   setIsFullScreen(true);\n  // }\n\n  // const hideFullScreen = () => {\n  //   setIsFullScreen(false);\n  // }\n\n  useEffect(() => {\n    fetch(\"https://htxrockets.com/api/archived-game/0022101142\")\n    .then( (res) => res.json() )\n    .then( (res) => {\n        // setData(res.g); \n        // setScoreDetail(GetScoreData(data));\n\n        // setLastPlayData(GetLastPlayData(data));\n        // setLoaded(true);\n        console.log('data loaded');\n        console.log(loaded);\n      },\n      // Note: handling errors here\n      // instead of a catch() block so that we don't swallow\n      // exceptions from actual bugs in components.\n      (error) => { \n        setError(error);\n        console.log(error);\n        setLoaded(true);\n      }\n    );\n  }, []);\n\n  if (error) {\n    return <div className=\"App\">Error: {error.message}</div>\n  } else if (!loaded) {\n    return <div className=\"loading-page\">\n        <LoadingScreen />\n      </div>\n  } else if (isFullScreen === true) {\n    return (\n      <div className=\"App\">\n        {/* Banner Section */}\n        {/* <section className=\"header\">\n          <Header props={data} />\n          <ScoreBoard props={scoreDetail} />\n        </section>\n        <section className=\"tab\"> */}\n          {/* <Tabs /> */}\n          {/* <div className=\"tab-bar\">\n            <button onClick={homeTeam}>{data.hls.ta}</button>\n            <button onClick={awayTeam}>{data.vls.ta}</button>\n            <button onClick={lastPlay}>Last Play</button>\n            <button onClick={tickets}>Tickets</button>\n            <button onClick={hideFullScreen}>Minimize</button>\n          </div>\n          { showTeamData === true && (\n            <div className=\"tab-content\">\n              <TeamStats props={teamData} />\n            </div>\n          )};\n          { showLastPlay === true && (\n            <LastPlayDetail props={lastPlayData}/>\n          )}\n          { showTickets === true && (\n            <Tickets />\n          )}\n        </section> */}\n      </div>\n    );\n  } else {\n    return (\n      <div className=\"App\">\n        {/* <section className=\"window\">\n          <ScoreBoard props={scoreDetail} />\n          <p className=\"window-lp-data\">Last Play: {data.lpla.cl} {data.lpla.de}</p>\n          <WindowScoreBoard props={data} />\n          <button onClick={fullScreen}>Expand</button>\n        </section> */}\n      </div>\n    )\n  }\n}\n\nexport default App;"]},"metadata":{},"sourceType":"module"}