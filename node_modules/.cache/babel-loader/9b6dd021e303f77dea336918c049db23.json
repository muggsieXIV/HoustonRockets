{"ast":null,"code":"var _jsxFileName = \"/Users/benniewalker/Desktop/2022_development/HoustonRockets/advancing_project/client/src/components/tabs/lastPlayDetail.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from 'react';\nimport LoadingScreen from '../resources/loadingScreen';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst LastPlayDetail = data => {\n  _s();\n\n  const instance = data;\n  console.log(instance);\n  const [lastPlayData, setLastPlayData] = useState(null);\n  const [pointLeaderData, setPointLeaderData] = useState(null);\n\n  const Canvas = () => {\n    const canvas = document.getElementById('canvas');\n    const ctx = canvas.getContext(\"2d\");\n    const xCoordinate = instance.locX / 2;\n    const yCoordinate = instance.locY / 2;\n    ctx.beginPath();\n    ctx.fillStyle = \"black\"; // Set canvas [0,0] to center\n\n    ctx.translate(canvas.width / 2, canvas.height / 2); // Draw \n\n    ctx.arc(xCoordinate, yCoordinate, 5, 0, Math.PI * 2);\n    ctx.closePath();\n    ctx.fill();\n    ctx.save();\n  };\n\n  useEffect(() => {\n    const canvas = Canvas();\n    return canvas;\n  }, []); // if(!loaded) {\n  //     return (\n  //         <LoadingScreen />\n  //     )\n  // } else {\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"last-play\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"last-play-header\",\n      children: /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [/*#__PURE__*/_jsxDEV(\"img\", {\n          src: instance.playerImg,\n          alt: \"player\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 48,\n          columnNumber: 24\n        }, this), \" Last Play @ \", instance.clock, \" \", instance.description]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 48,\n        columnNumber: 21\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 17\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"last-play-canvas\",\n      children: /*#__PURE__*/_jsxDEV(\"canvas\", {\n        id: \"canvas\",\n        className: \"canvas\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 52,\n        columnNumber: 21\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 17\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 46,\n    columnNumber: 13\n  }, this); // }\n};\n\n_s(LastPlayDetail, \"HzuYEzt5aEaVd5OpfPQYQ2h/e6k=\");\n\n_c = LastPlayDetail;\nexport default LastPlayDetail; // Component goal, render 'last play' data out onto court based on coordinate provided\n// Future goal, render all game event coordinates once a game has completed. \n// Future goal, render all game events with hover over effect with popup of description\n\nvar _c;\n\n$RefreshReg$(_c, \"LastPlayDetail\");","map":{"version":3,"sources":["/Users/benniewalker/Desktop/2022_development/HoustonRockets/advancing_project/client/src/components/tabs/lastPlayDetail.jsx"],"names":["React","useEffect","useState","LoadingScreen","LastPlayDetail","data","instance","console","log","lastPlayData","setLastPlayData","pointLeaderData","setPointLeaderData","Canvas","canvas","document","getElementById","ctx","getContext","xCoordinate","locX","yCoordinate","locY","beginPath","fillStyle","translate","width","height","arc","Math","PI","closePath","fill","save","playerImg","clock","description"],"mappings":";;;AAAA,OAAOA,KAAP,IAAeC,SAAf,EAA0BC,QAA1B,QAAyC,OAAzC;AACA,OAAOC,aAAP,MAA0B,4BAA1B;;;AAGA,MAAMC,cAAc,GAAIC,IAAD,IAAU;AAAA;;AAC7B,QAAMC,QAAQ,GAAGD,IAAjB;AACAE,EAAAA,OAAO,CAACC,GAAR,CAAYF,QAAZ;AAEA,QAAM,CAAEG,YAAF,EAAgBC,eAAhB,IAAoCR,QAAQ,CAAC,IAAD,CAAlD;AACA,QAAM,CAAES,eAAF,EAAmBC,kBAAnB,IAA0CV,QAAQ,CAAC,IAAD,CAAxD;;AAGA,QAAMW,MAAM,GAAG,MAAM;AACjB,UAAMC,MAAM,GAAGC,QAAQ,CAACC,cAAT,CAAwB,QAAxB,CAAf;AACA,UAAMC,GAAG,GAAGH,MAAM,CAACI,UAAP,CAAkB,IAAlB,CAAZ;AAEA,UAAMC,WAAW,GAAGb,QAAQ,CAACc,IAAT,GAAgB,CAApC;AACA,UAAMC,WAAW,GAAGf,QAAQ,CAACgB,IAAT,GAAgB,CAApC;AAEAL,IAAAA,GAAG,CAACM,SAAJ;AAEAN,IAAAA,GAAG,CAACO,SAAJ,GAAgB,OAAhB,CATiB,CAWjB;;AACAP,IAAAA,GAAG,CAACQ,SAAJ,CAAcX,MAAM,CAACY,KAAP,GAAa,CAA3B,EAA6BZ,MAAM,CAACa,MAAP,GAAc,CAA3C,EAZiB,CAcjB;;AACAV,IAAAA,GAAG,CAACW,GAAJ,CAAQT,WAAR,EAAoBE,WAApB,EAAgC,CAAhC,EAAkC,CAAlC,EAAoCQ,IAAI,CAACC,EAAL,GAAQ,CAA5C;AACAb,IAAAA,GAAG,CAACc,SAAJ;AACAd,IAAAA,GAAG,CAACe,IAAJ;AAEAf,IAAAA,GAAG,CAACgB,IAAJ;AACH,GApBD;;AAsBAhC,EAAAA,SAAS,CAAC,MAAI;AACV,UAAMa,MAAM,GAAGD,MAAM,EAArB;AACA,WAAOC,MAAP;AACH,GAHQ,EAGN,EAHM,CAAT,CA9B6B,CAmC7B;AACA;AACA;AACA;AACA;;AACI,sBACI;AAAK,IAAA,SAAS,EAAC,WAAf;AAAA,4BACI;AAAK,MAAA,SAAS,EAAC,kBAAf;AAAA,6BACI;AAAA,gCAAG;AAAK,UAAA,GAAG,EAAER,QAAQ,CAAC4B,SAAnB;AAA8B,UAAA,GAAG,EAAC;AAAlC;AAAA;AAAA;AAAA;AAAA,gBAAH,mBAA+D5B,QAAQ,CAAC6B,KAAxE,OAAkF7B,QAAQ,CAAC8B,WAA3F;AAAA;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,YADJ,eAKI;AAAK,MAAA,SAAS,EAAC,kBAAf;AAAA,6BACI;AAAQ,QAAA,EAAE,EAAC,QAAX;AAAoB,QAAA,SAAS,EAAC;AAA9B;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,YALJ;AAAA;AAAA;AAAA;AAAA;AAAA,UADJ,CAxCyB,CAmD7B;AACH,CApDD;;GAAMhC,c;;KAAAA,c;AAsDN,eAAeA,cAAf,C,CAGA;AACA;AACA","sourcesContent":["import React, {useEffect, useState} from 'react';\nimport LoadingScreen from '../resources/loadingScreen';\n\n\nconst LastPlayDetail = (data) => {\n    const instance = data;\n    console.log(instance);\n\n    const [ lastPlayData, setLastPlayData ] = useState(null);\n    const [ pointLeaderData, setPointLeaderData ] = useState(null);\n\n\n    const Canvas = () => {\n        const canvas = document.getElementById('canvas');\n        const ctx = canvas.getContext(\"2d\");\n\n        const xCoordinate = instance.locX / 2;\n        const yCoordinate = instance.locY / 2;\n\n        ctx.beginPath();\n\n        ctx.fillStyle = \"black\";\n\n        // Set canvas [0,0] to center\n        ctx.translate(canvas.width/2,canvas.height/2);\n\n        // Draw \n        ctx.arc(xCoordinate,yCoordinate,5,0,Math.PI*2);\n        ctx.closePath();\n        ctx.fill();\n\n        ctx.save();\n    }\n\n    useEffect(()=>{\n        const canvas = Canvas();\n        return canvas;\n    }, [])\n\n    // if(!loaded) {\n    //     return (\n    //         <LoadingScreen />\n    //     )\n    // } else {\n        return (\n            <div className=\"last-play\">\n                <div className=\"last-play-header\">\n                    <p><img src={instance.playerImg} alt=\"player\" /> Last Play @ { instance.clock } { instance.description }</p>\n                </div>\n\n                <div className=\"last-play-canvas\">\n                    <canvas id=\"canvas\" className=\"canvas\"></canvas>\n                </div>\n            </div>\n        )\n    // }\n}\n\nexport default LastPlayDetail;\n\n\n// Component goal, render 'last play' data out onto court based on coordinate provided\n// Future goal, render all game event coordinates once a game has completed. \n// Future goal, render all game events with hover over effect with popup of description\n"]},"metadata":{},"sourceType":"module"}