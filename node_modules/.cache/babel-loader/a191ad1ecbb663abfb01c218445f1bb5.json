{"ast":null,"code":"var _jsxFileName = \"/Users/benniewalker/Desktop/2022_DEPLOYED/HoustonRockets/HoustonRockets/client/src/components/tabs/lastPlayDetail.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from 'react';\nimport LoadingScreen from '../resources/loadingScreen';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst LastPlayDetail = data => {\n  _s();\n\n  const instance = data.props;\n  const [loaded, setLoaded] = useState(false);\n  console.log(instance);\n\n  const Canvas = () => {\n    const canvas = document.getElementById('canvas');\n    const ctx = canvas.getContext(\"2d\");\n    const xCoordinate = instance.lpla.locX / 2;\n    const yCoordinate = instance.lpla.locY / 2;\n    ctx.beginPath();\n    ctx.fillStyle = \"orange\"; // Set canvas [0,0] to center\n\n    ctx.translate(canvas.width / 2, canvas.height / 2); // Draw \n\n    ctx.arc(xCoordinate, yCoordinate, 5, 0, Math.PI * 2);\n    ctx.closePath();\n    ctx.fill();\n    ctx.save();\n  };\n\n  useEffect(() => {\n    const canvas = Canvas();\n    return canvas;\n  }, []);\n\n  if (loaded) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"last-play\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"last-play-header\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"scrollbox\",\n          children: [/*#__PURE__*/_jsxDEV(\"img\", {\n            src: instance.playerImg,\n            alt: \"player\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 44,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"h5\", {\n            children: [\"Last Play @ \", instance.clock, \" | \", instance.description]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 45,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 43,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 42,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"last-play-canvas\",\n        children: /*#__PURE__*/_jsxDEV(\"canvas\", {\n          id: \"canvas\",\n          className: \"canvas\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 50,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 49,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 13\n    }, this);\n  } else {\n    return /*#__PURE__*/_jsxDEV(LoadingScreen, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 13\n    }, this);\n  }\n};\n\n_s(LastPlayDetail, \"I8RUn14npbk54TheiKdNt4wCpsU=\");\n\n_c = LastPlayDetail;\nexport default LastPlayDetail; // Component goal, render 'last play' data out onto court based on coordinate provided\n// Future goal, render all game event coordinates once a game has completed. \n// Future goal, render all game events with hover over effect with popup of description\n\nvar _c;\n\n$RefreshReg$(_c, \"LastPlayDetail\");","map":{"version":3,"sources":["/Users/benniewalker/Desktop/2022_DEPLOYED/HoustonRockets/HoustonRockets/client/src/components/tabs/lastPlayDetail.jsx"],"names":["React","useEffect","useState","LoadingScreen","LastPlayDetail","data","instance","props","loaded","setLoaded","console","log","Canvas","canvas","document","getElementById","ctx","getContext","xCoordinate","lpla","locX","yCoordinate","locY","beginPath","fillStyle","translate","width","height","arc","Math","PI","closePath","fill","save","playerImg","clock","description"],"mappings":";;;AAAA,OAAOA,KAAP,IAAeC,SAAf,EAA0BC,QAA1B,QAAyC,OAAzC;AACA,OAAOC,aAAP,MAA0B,4BAA1B;;;AAEA,MAAMC,cAAc,GAAIC,IAAD,IAAU;AAAA;;AAC7B,QAAMC,QAAQ,GAAGD,IAAI,CAACE,KAAtB;AACA,QAAM,CAACC,MAAD,EAASC,SAAT,IAAsBP,QAAQ,CAAC,KAAD,CAApC;AAEAQ,EAAAA,OAAO,CAACC,GAAR,CAAYL,QAAZ;;AAEA,QAAMM,MAAM,GAAG,MAAM;AACjB,UAAMC,MAAM,GAAGC,QAAQ,CAACC,cAAT,CAAwB,QAAxB,CAAf;AACA,UAAMC,GAAG,GAAGH,MAAM,CAACI,UAAP,CAAkB,IAAlB,CAAZ;AAEA,UAAMC,WAAW,GAAGZ,QAAQ,CAACa,IAAT,CAAcC,IAAd,GAAqB,CAAzC;AACA,UAAMC,WAAW,GAAGf,QAAQ,CAACa,IAAT,CAAcG,IAAd,GAAqB,CAAzC;AAEAN,IAAAA,GAAG,CAACO,SAAJ;AAEAP,IAAAA,GAAG,CAACQ,SAAJ,GAAgB,QAAhB,CATiB,CAWjB;;AACAR,IAAAA,GAAG,CAACS,SAAJ,CAAcZ,MAAM,CAACa,KAAP,GAAa,CAA3B,EAA6Bb,MAAM,CAACc,MAAP,GAAc,CAA3C,EAZiB,CAcjB;;AACAX,IAAAA,GAAG,CAACY,GAAJ,CAAQV,WAAR,EAAoBG,WAApB,EAAgC,CAAhC,EAAkC,CAAlC,EAAoCQ,IAAI,CAACC,EAAL,GAAQ,CAA5C;AACAd,IAAAA,GAAG,CAACe,SAAJ;AACAf,IAAAA,GAAG,CAACgB,IAAJ;AAEAhB,IAAAA,GAAG,CAACiB,IAAJ;AACH,GApBD;;AAsBAhC,EAAAA,SAAS,CAAC,MAAI;AACV,UAAMY,MAAM,GAAGD,MAAM,EAArB;AACA,WAAOC,MAAP;AACH,GAHQ,EAGN,EAHM,CAAT;;AAKA,MAAIL,MAAJ,EAAY;AACR,wBACI;AAAK,MAAA,SAAS,EAAC,WAAf;AAAA,8BAGI;AAAK,QAAA,SAAS,EAAC,kBAAf;AAAA,+BACI;AAAK,UAAA,SAAS,EAAC,WAAf;AAAA,kCACI;AAAK,YAAA,GAAG,EAAEF,QAAQ,CAAC4B,SAAnB;AAA+B,YAAA,GAAG,EAAC;AAAnC;AAAA;AAAA;AAAA;AAAA,kBADJ,eAEI;AAAA,uCAAkB5B,QAAQ,CAAC6B,KAA3B,SAAuC7B,QAAQ,CAAC8B,WAAhD;AAAA;AAAA;AAAA;AAAA;AAAA,kBAFJ;AAAA;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,cAHJ,eAUI;AAAK,QAAA,SAAS,EAAC,kBAAf;AAAA,+BACI;AAAQ,UAAA,EAAE,EAAC,QAAX;AAAoB,UAAA,SAAS,EAAC;AAA9B;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,cAVJ;AAAA;AAAA;AAAA;AAAA;AAAA,YADJ;AAgBH,GAjBD,MAiBO;AACH,wBACI,QAAC,aAAD;AAAA;AAAA;AAAA;AAAA,YADJ;AAGH;AAGJ,CAzDD;;GAAMhC,c;;KAAAA,c;AA2DN,eAAeA,cAAf,C,CAGA;AACA;AACA","sourcesContent":["import React, {useEffect, useState} from 'react';\nimport LoadingScreen from '../resources/loadingScreen';\n\nconst LastPlayDetail = (data) => {\n    const instance = data.props;\n    const [loaded, setLoaded] = useState(false);\n\n    console.log(instance);\n\n    const Canvas = () => {\n        const canvas = document.getElementById('canvas');\n        const ctx = canvas.getContext(\"2d\");\n\n        const xCoordinate = instance.lpla.locX / 2;\n        const yCoordinate = instance.lpla.locY / 2;\n\n        ctx.beginPath();\n\n        ctx.fillStyle = \"orange\";\n\n        // Set canvas [0,0] to center\n        ctx.translate(canvas.width/2,canvas.height/2);\n\n        // Draw \n        ctx.arc(xCoordinate,yCoordinate,5,0,Math.PI*2);\n        ctx.closePath();\n        ctx.fill();\n\n        ctx.save();\n    }\n\n    useEffect(()=>{\n        const canvas = Canvas();\n        return canvas;\n    }, [])\n\n    if (loaded) {\n        return (\n            <div className=\"last-play\">\n    \n                {/* To Do: make this section auto scroll on its own vertically. */}\n                <div className=\"last-play-header\">\n                    <div className=\"scrollbox\">\n                        <img src={instance.playerImg } alt=\"player\" />\n                        <h5>Last Play @ { instance.clock } | { instance.description }</h5>\n                    </div>\n                </div>\n    \n                <div className=\"last-play-canvas\">\n                    <canvas id=\"canvas\" className=\"canvas\"></canvas>\n                </div>\n            </div>\n        )\n    } else {\n        return (\n            <LoadingScreen />\n        )\n    }\n\n    \n}\n\nexport default LastPlayDetail;\n\n\n// Component goal, render 'last play' data out onto court based on coordinate provided\n// Future goal, render all game event coordinates once a game has completed. \n// Future goal, render all game events with hover over effect with popup of description\n"]},"metadata":{},"sourceType":"module"}